

*** Generated by yangdump 2.12-0
*** Copyright (c) 2008-2012, Andy Bierman, All Rights Reserved.

*** /usr/share/yuma/modules/examples/helloworld.yang
*** 0 Errors, 0 Warnings

/* 
 * Copyright (c) 2008-2012, Andy Bierman, All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump 2.12-0

  Combined SIL module
  module helloworld
  revision 2016-09-15
  namespace http://helloworld.com/ns/helloworld
  organization helloworld organization

 */

#include <xmlstring.h>

#include "procdefs.h"
#include "agt.h"
#include "agt_cb.h"
#include "agt_timer.h"
#include "agt_util.h"
#include "dlq.h"
#include "ncx.h"
#include "ncx_feature.h"
#include "ncxmod.h"
#include "ncxtypes.h"
#include "status.h"
#include "helloworld.h"

/* module static variables */
static ncx_module_t *helloworld_mod;
static obj_template_t *helloworld_state_obj;
static obj_template_t *helloworld_obj;
static val_value_t *helloworld_val;

/* put your static variables here */

/********************************************************************
* FUNCTION y_helloworld_init_static_vars
* 
* initialize module static variables
* 
********************************************************************/
static void y_helloworld_init_static_vars (void)
{
  helloworld_mod = NULL;
  helloworld_state_obj = NULL;
  helloworld_obj = NULL;
  helloworld_val = NULL;

  /* init your static variables here */

} /* y_helloworld_init_static_vars */

/********************************************************************
* FUNCTION helloworld_helloworld_state_message_get
* 
* Get database object callback
* Path: /helloworld-state/message
* Fill in 'dstval' contents
* 
* INPUTS:
*     see ncx/getcb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
static status_t helloworld_helloworld_state_message_get (
  ses_cb_t *scb,
  getcb_mode_t cbmode,
  const val_value_t *virval,
  val_value_t *dstval)
{
  status_t res = NO_ERR;
  const xmlChar *message;

  if (LOGDEBUG) {
    log_debug("\nEnter helloworld_helloworld_state_message_get callback");
  }


  /* remove the next line if scb is used */
  (void)scb;

  /* remove the next line if virval is used */
  (void)virval;

  if (cbmode != GETCB_GET_VALUE) {
    return ERR_NCX_OPERATION_NOT_SUPPORTED;
  }

  /* set the message var here, change EMPTY_STRING */
  message = EMPTY_STRING;
  res = val_set_simval_obj(
    dstval,
    dstval->obj,
    message);

  return res;

} /* helloworld_helloworld_state_message_get */

Warning: no get-CB generated for top-level operational container 'helloworld-state'

/********************************************************************
* FUNCTION helloworld_helloworld_state_mro
* 
* Make read-only top-level node
* Path: /helloworld-state
* 
* RETURNS:
*     error status
********************************************************************/
static status_t
  helloworld_helloworld_state_mro (void)
{
  val_value_t *parentval = NULL, *childval = NULL;
  status_t res = NO_ERR;


  /* add /helloworld-state */
  res = agt_add_top_container(helloworld_state_obj, &parentval);
  if (res != NO_ERR) {
    return res;
  }

  /* add /helloworld-state/message */
  childval = agt_make_virtual_leaf(
    parentval->obj,
    y_helloworld_N_message,
    helloworld_helloworld_state_message_get,
    &res);
  if (childval != NULL) {
    val_add_child(childval, parentval);
  } else {
    return res;
  }

  return res;

} /* helloworld_helloworld_state_mro */


/********************************************************************
* FUNCTION helloworld_helloworld_message_edit
* 
* Edit database object callback
* Path: /helloworld/message
* Add object instrumentation in COMMIT phase.
* 
* INPUTS:
*     see agt/agt_cb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
static status_t helloworld_helloworld_message_edit (
  ses_cb_t *scb,
  rpc_msg_t *msg,
  agt_cbtyp_t cbtyp,
  op_editop_t editop,
  val_value_t *newval,
  val_value_t *curval)
{
  status_t res = NO_ERR;
  val_value_t *errorval = (curval) ? curval : newval;

  if (LOGDEBUG) {
    log_debug("\nEnter helloworld_helloworld_message_edit callback for %s phase",
      agt_cbtype_name(cbtyp));
  }

  switch (cbtyp) {
  case AGT_CB_VALIDATE:
    /* description-stmt validation here */
    break;
  case AGT_CB_APPLY:
    /* database manipulation done here */
    break;
  case AGT_CB_COMMIT:
    /* device instrumentation done here */
    switch (editop) {
    case OP_EDITOP_LOAD:
      break;
    case OP_EDITOP_MERGE:
      break;
    case OP_EDITOP_REPLACE:
      break;
    case OP_EDITOP_CREATE:
      break;
    case OP_EDITOP_DELETE:
      break;
    default:
      res = SET_ERROR(ERR_INTERNAL_VAL);
    }
    break;
  case AGT_CB_ROLLBACK:
    /* undo device instrumentation here */
    break;
  default:
    res = SET_ERROR(ERR_INTERNAL_VAL);
  }

  if (res != NO_ERR) {
    agt_record_error(
      scb,
      &msg->mhdr,
      NCX_LAYER_CONTENT,
      res,
      NULL,
      (errorval) ? NCX_NT_VAL : NCX_NT_NONE,
      errorval,
      (errorval) ? NCX_NT_VAL : NCX_NT_NONE,
      errorval);
  }
  return res;

} /* helloworld_helloworld_message_edit */


/********************************************************************
* FUNCTION helloworld_helloworld_edit
* 
* Edit database object callback
* Path: /helloworld
* Add object instrumentation in COMMIT phase.
* 
* INPUTS:
*     see agt/agt_cb.h for details
* 
* RETURNS:
*     error status
********************************************************************/
static status_t helloworld_helloworld_edit (
  ses_cb_t *scb,
  rpc_msg_t *msg,
  agt_cbtyp_t cbtyp,
  op_editop_t editop,
  val_value_t *newval,
  val_value_t *curval)
{
  status_t res = NO_ERR;
  val_value_t *errorval = (curval) ? curval : newval;

  if (LOGDEBUG) {
    log_debug("\nEnter helloworld_helloworld_edit callback for %s phase",
      agt_cbtype_name(cbtyp));
  }

  switch (cbtyp) {
  case AGT_CB_VALIDATE:
    /* description-stmt validation here */
    break;
  case AGT_CB_APPLY:
    /* database manipulation done here */
    break;
  case AGT_CB_COMMIT:
    /* device instrumentation done here */
    switch (editop) {
    case OP_EDITOP_LOAD:
      break;
    case OP_EDITOP_MERGE:
      break;
    case OP_EDITOP_REPLACE:
      break;
    case OP_EDITOP_CREATE:
      break;
    case OP_EDITOP_DELETE:
      break;
    default:
      res = SET_ERROR(ERR_INTERNAL_VAL);
    }

    if (res == NO_ERR) {
      res = agt_check_cache(&helloworld_val, newval, curval, editop);
    }
    
    break;
  case AGT_CB_ROLLBACK:
    /* undo device instrumentation here */
    break;
  default:
    res = SET_ERROR(ERR_INTERNAL_VAL);
  }

  if (res != NO_ERR) {
    agt_record_error(
      scb,
      &msg->mhdr,
      NCX_LAYER_CONTENT,
      res,
      NULL,
      (errorval) ? NCX_NT_VAL : NCX_NT_NONE,
      errorval,
      (errorval) ? NCX_NT_VAL : NCX_NT_NONE,
      errorval);
  }
  return res;

} /* helloworld_helloworld_edit */

/********************************************************************
* FUNCTION y_helloworld_init
* 
* initialize the helloworld server instrumentation library
* 
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
* 
* RETURNS:
*     error status
********************************************************************/
status_t y_helloworld_init (
  const xmlChar *modname,
  const xmlChar *revision)
{
  status_t res = NO_ERR;
  agt_profile_t *agt_profile = agt_get_profile();

  y_helloworld_init_static_vars();

  /* change if custom handling done */
  if (xml_strcmp(modname, y_helloworld_M_helloworld)) {
    return ERR_NCX_UNKNOWN_MODULE;
  }

  if (revision && xml_strcmp(revision, y_helloworld_R_helloworld)) {
    return ERR_NCX_WRONG_VERSION;
  }
  res = ncxmod_load_module(
    y_helloworld_M_helloworld,
    y_helloworld_R_helloworld,
    &agt_profile->agt_savedevQ,
    &helloworld_mod);
  if (res != NO_ERR) {
    return res;
  }

  helloworld_state_obj = ncx_find_object(
    helloworld_mod,
    y_helloworld_N_helloworld_state);
  if (helloworld_mod == NULL) {
    return SET_ERROR(ERR_NCX_DEF_NOT_FOUND);
  }
  helloworld_obj = ncx_find_object(
    helloworld_mod,
    y_helloworld_N_helloworld);
  if (helloworld_mod == NULL) {
    return SET_ERROR(ERR_NCX_DEF_NOT_FOUND);
  }
  res = agt_cb_register_callback(
    y_helloworld_M_helloworld,
    (const xmlChar *)"/helloworld",
    y_helloworld_R_helloworld,
    helloworld_helloworld_edit);
  if (res != NO_ERR) {
    return res;
  }

  res = agt_cb_register_callback(
    y_helloworld_M_helloworld,
    (const xmlChar *)"/helloworld/message",
    y_helloworld_R_helloworld,
    helloworld_helloworld_message_edit);
  if (res != NO_ERR) {
    return res;
  }

  /* put your module initialization code here */
  
  return res;
} /* y_helloworld_init */

/********************************************************************
* FUNCTION y_helloworld_init2
* 
* SIL init phase 2: non-config data structures
* Called after running config is loaded
* 
* RETURNS:
*     error status
********************************************************************/
status_t y_helloworld_init2 (void)
{
  status_t res = NO_ERR;

  helloworld_val = agt_init_cache(
    y_helloworld_M_helloworld,
    y_helloworld_N_helloworld,
    &res);
  if (res != NO_ERR) {
    return res;
  }

  res = helloworld_helloworld_state_mro();
  if (res != NO_ERR) {
    return res;
  }

  /* put your init2 code here */

  return res;
} /* y_helloworld_init2 */

/********************************************************************
* FUNCTION y_helloworld_cleanup
*    cleanup the server instrumentation library
* 
********************************************************************/
void y_helloworld_cleanup (void)
{
  agt_cb_unregister_callbacks(
    y_helloworld_M_helloworld,
    (const xmlChar *)"/helloworld");

  agt_cb_unregister_callbacks(
    y_helloworld_M_helloworld,
    (const xmlChar *)"/helloworld/message");

  /* put your cleanup code here */
  
} /* y_helloworld_cleanup */

/* END helloworld.c */

